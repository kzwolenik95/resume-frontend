AWSTemplateFormatVersion: 2010-09-09
Parameters:
  PipelineName:
    Type: String
  CodeBuildName:
    Type: String
  DockerImageURL:
    Type: String
    Default: "public.ecr.aws/u7z7r9o7/ecr-repo:ext-alpine-ci"
  LambdaUserParameters:
    Type: String
    Default: '{"dist_id": "E7IZ3D710GJNR", "object_paths": ["/*"]}'
  DeployBucket:
    Type: String
    Default: "dev.kzwolenik.com"
  CodeCommitRepoURL:
    Type: String
    Default: https://git-codecommit.us-east-1.amazonaws.com/v1/repos/resume
  CodeCommitRepoName:
    Type: String
    Default: resume
  E2ERepoName:
    Type: String
    Default: e2e_tests
  E2ECodeBuildName:
    Type: String
    Default: E2E_Tests
Resources:
  ArtifactStoreBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        !Sub 
        - "codepipeline-${AWS::Region}-${RandomGUID}"
        - { RandomGUID: !Select [0, !Split ["-", !Select [2, !Split ["/", !Ref AWS::StackId ]]]] }
  CloudFormationRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/service-role/"
      RoleName: !Sub 'CloudFormationRole-${AWS::Region}-${PipelineName}'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AdministratorAccess"
  CodePipeline:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      Name: !Ref PipelineName
      RestartExecutionOnUpdate: false
      ArtifactStore:
        Location: !Ref ArtifactStoreBucket
        Type: S3
      RoleArn: !GetAtt CodePipelineRole.Arn
      Stages:
        - Name: "Source"
          Actions:
            - ActionTypeId:
                Owner: "AWS"
                Category: "Source"
                Version: "1"
                Provider: "CodeCommit"
              Name: "Source"
              OutputArtifacts:
                - Name: "SourceArtifact"
              Configuration:
                "BranchName": "master"
                "OutputArtifactFormat": "CODE_ZIP"
                "PollForSourceChanges": "false"
                "RepositoryName": !Ref CodeCommitRepoName
            - ActionTypeId:
                Owner: "AWS"
                Category: "Source"
                Version: "1"
                Provider: "CodeCommit"
              Name: "SourceE2Etest"
              OutputArtifacts:
                - Name: "E2ETestArtifact"
              Configuration:
                "BranchName": "master"
                "OutputArtifactFormat": "CODE_ZIP"
                "PollForSourceChanges": "false"
                "RepositoryName": !Ref E2ERepoName
        - Name: "Provision"
          Actions:
            - ActionTypeId:
                Owner: AWS
                Category: Deploy
                Version: "1"
                Provider: CloudFormation
              Name: "Provision"
              Configuration:
                  ActionMode: CREATE_UPDATE
                  Capabilities: CAPABILITY_NAMED_IAM
                  ParameterOverrides: '{"Domain": "kzwolenik.com","EnvType": "TEST"}'
                  RoleArn: !GetAtt CloudFormationRole.Arn
                  StackName: resume_stack
                  TemplatePath: 'SourceArtifact::resume_template.yaml'
              InputArtifacts:
                - Name: SourceArtifact
        - Name: "Build"
          Actions:
            - ActionTypeId:
                Owner: "AWS"
                Category: "Build"
                Version: "1"
                Provider: "CodeBuild"
              Name: "Build"
              InputArtifacts:
                - Name: "SourceArtifact"
              OutputArtifacts:
                - Name: "BuildArtifact"
              Configuration:
                "ProjectName": !Ref CodeBuildName
        - Name: "Deploy"
          Actions:
            - ActionTypeId:
                Owner: "AWS"
                Category: "Deploy"
                Version: "1"
                Provider: "S3"
              Name: "Deploy"
              InputArtifacts:
                - Name: "BuildArtifact"
              Configuration:
                "BucketName": !Ref DeployBucket
                "Extract": "true"
        - Name: "CacheInvalidate"
          Actions:
            - ActionTypeId:
                Owner: "AWS"
                Category: "Invoke"
                Version: "1"
                Provider: "Lambda"
              Name: "Invalidate"
              Configuration:
                "FunctionName": !Ref InvalidateCacheLambdaFunction
                "UserParameters": !Ref LambdaUserParameters
        - Name: "E2Etest"
          Actions:
            - ActionTypeId:
                Owner: "AWS"
                Category: "Test"
                Version: "1"
                Provider: "CodeBuild"
              Name: E2Etest
              InputArtifacts:
                - Name: "E2ETestArtifact"
              Configuration:
                ProjectName: !Ref CodeBuildE2Etest
    DependsOn:
      - CodeBuild
      - CodePipelineRolePolicy
  CodePipelineRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/service-role/"
      RoleName: !Sub 'CodePipelineServiceRole-${AWS::Region}-${PipelineName}'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: "sts:AssumeRole"
  InvalidateCacheLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: InvalidateCacheLambdaRole
      Path: "/service-role/"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
  InvalidateCacheLambdaPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: InvalidateCacheLambdaPolicy
      Roles:
        - !Ref  InvalidateCacheLambdaRole
      PolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - codepipeline:PutJobFailureResult
              - codepipeline:PutJobSuccessResult
            Resource: '*'
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - cloudfront:CreateInvalidation
            Resource:
              - arn:aws:logs:us-east-1:*:*
              - arn:aws:cloudfront::*:distribution/*
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: arn:aws:logs:us-east-1:982211721436:log-group:/aws/lambda/invalidate_cloudfront_cache:*
  InvalidateCacheLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3

          code_pipeline_client = boto3.client("codepipeline")
          cloud_front_client = boto3.client("cloudfront")


          def lambda_handler(event, context):
              job_id = event["CodePipeline.job"]["id"]

              try:
                  user_params = json.loads(
                      event["CodePipeline.job"]["data"]["actionConfiguration"]["configuration"][
                          "UserParameters"
                      ]
                  )
                  cloud_front_client.create_invalidation(
                      DistributionId=user_params["dist_id"],
                      InvalidationBatch={
                          "Paths": {
                              "Quantity": len(user_params["object_paths"]),
                              "Items": user_params["object_paths"],
                          },
                          "CallerReference": job_id,
                      },
                  )
              except Exception as e:
                  code_pipeline_client.put_job_failure_result(
                      jobId=job_id,
                      failureDetails={
                          "type": "JobFailed",
                          "message": f"Failed due to the exception {str(e)}",
                      },
                  )
              else:
                  code_pipeline_client.put_job_success_result(
                      jobId=job_id,
                  )
      Description: "Lambda function to invalidate CloudFront cache"
      FunctionName: "invalidate_cloudfront_cache"
      Role: !GetAtt InvalidateCacheLambdaRole.Arn
      Runtime: "python3.9"
      Handler: "index.lambda_handler"
    DependsOn:
      - "InvalidateCacheLambdaPolicy"
  CodePipelineRolePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - iam:PassRole
            Resource: "*"
            Effect: Allow
            Condition:
              StringEqualsIfExists:
                iam:PassedToService:
                  - cloudformation.amazonaws.com
                  - elasticbeanstalk.amazonaws.com
                  - ec2.amazonaws.com
                  - ecs-tasks.amazonaws.com
          - Action:
              - codecommit:CancelUploadArchive
              - codecommit:GetBranch
              - codecommit:GetCommit
              - codecommit:GetRepository
              - codecommit:GetUploadArchiveStatus
              - codecommit:UploadArchive
            Resource: "*"
            Effect: Allow
          - Action:
              - codedeploy:CreateDeployment
              - codedeploy:GetApplication
              - codedeploy:GetApplicationRevision
              - codedeploy:GetDeployment
              - codedeploy:GetDeploymentConfig
              - codedeploy:RegisterApplicationRevision
            Resource: "*"
            Effect: Allow
          - Action:
              - codestar-connections:UseConnection
            Resource: "*"
            Effect: Allow
          - Action:
              - elasticbeanstalk:*
              - ec2:*
              - elasticloadbalancing:*
              - autoscaling:*
              - cloudwatch:*
              - s3:*
              - sns:*
              - cloudformation:*
              - rds:*
              - sqs:*
              - ecs:*
            Resource: "*"
            Effect: Allow
          - Action:
              - lambda:InvokeFunction
              - lambda:ListFunctions
            Resource: "*"
            Effect: Allow
          - Action:
              - opsworks:CreateDeployment
              - opsworks:DescribeApps
              - opsworks:DescribeCommands
              - opsworks:DescribeDeployments
              - opsworks:DescribeInstances
              - opsworks:DescribeStacks
              - opsworks:UpdateApp
              - opsworks:UpdateStack
            Resource: "*"
            Effect: Allow
          - Action:
              - cloudformation:CreateStack
              - cloudformation:DeleteStack
              - cloudformation:DescribeStacks
              - cloudformation:UpdateStack
              - cloudformation:CreateChangeSet
              - cloudformation:DeleteChangeSet
              - cloudformation:DescribeChangeSet
              - cloudformation:ExecuteChangeSet
              - cloudformation:SetStackPolicy
              - cloudformation:ValidateTemplate
            Resource: "*"
            Effect: Allow
          - Action:
              - codebuild:BatchGetBuilds
              - codebuild:StartBuild
              - codebuild:BatchGetBuildBatches
              - codebuild:StartBuildBatch
            Resource: "*"
            Effect: Allow
          - Effect: Allow
            Action:
              - devicefarm:ListProjects
              - devicefarm:ListDevicePools
              - devicefarm:GetRun
              - devicefarm:GetUpload
              - devicefarm:CreateUpload
              - devicefarm:ScheduleRun
            Resource: "*"
          - Effect: Allow
            Action:
              - servicecatalog:ListProvisioningArtifacts
              - servicecatalog:CreateProvisioningArtifact
              - servicecatalog:DescribeProvisioningArtifact
              - servicecatalog:DeleteProvisioningArtifact
              - servicecatalog:UpdateProduct
            Resource: "*"
          - Effect: Allow
            Action:
              - cloudformation:ValidateTemplate
            Resource: "*"
          - Effect: Allow
            Action:
              - ecr:DescribeImages
            Resource: "*"
          - Effect: Allow
            Action:
              - states:DescribeExecution
              - states:DescribeStateMachine
              - states:StartExecution
            Resource: "*"
          - Effect: Allow
            Action:
              - appconfig:StartDeployment
              - appconfig:StopDeployment
              - appconfig:GetDeployment
            Resource: "*"
      PolicyName: !Sub 'CodePipelineServiceRole-${AWS::Region}-${PipelineName}'
      Roles:
        - !Ref CodePipelineRole
  CodeBuildRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "CodeBuildServiceRole-${AWS::Region}-${CodeBuildName}"
      Path: "/service-role/"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: "codebuild.amazonaws.com"
            Action: "sts:AssumeRole"
  CodeBuildRolePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Resource:
              - !Sub "arn:aws:logs:us-east-1:${AWS::AccountId}:log-group:/aws/codebuild/${CodeBuildName}"
              - !Sub "arn:aws:logs:us-east-1:${AWS::AccountId}:log-group:/aws/codebuild/${CodeBuildName}:*"
            Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
          - Effect: Allow
            Resource:
              - "arn:aws:s3:::codepipeline-us-east-1-*"
            Action:
              - "s3:PutObject"
              - "s3:GetObject"
              - "s3:GetObjectVersion"
              - "s3:GetBucketAcl"
              - "s3:GetBucketLocation"
          - Effect: Allow
            Resource:
              - !Sub "arn:aws:codecommit:us-east-1:${AWS::AccountId}:${CodeCommitRepoName}"
            Action:
              - "codecommit:GitPull"
          - Effect: Allow
            Resource:
              - !Sub "arn:aws:s3:::${CodeBuildOutputBucket}"
              - !Sub "arn:aws:s3:::${CodeBuildOutputBucket}/*"
            Action:
              - "s3:PutObject"
              - "s3:GetBucketAcl"
              - "s3:GetBucketLocation"
          - Effect: Allow
            Action:
              - "codebuild:CreateReportGroup"
              - "codebuild:CreateReport"
              - "codebuild:UpdateReport"
              - "codebuild:BatchPutTestCases"
              - "codebuild:BatchPutCodeCoverages"
            Resource:
              - !Sub "arn:aws:codebuild:us-east-1:${AWS::AccountId}:report-group/${CodeBuildName}-*"
      PolicyName: !Sub 'CodeBuildBasePolicy-${CodeBuildName}-${AWS::Region}'
      Roles:
        - !Ref CodeBuildRole
  CodeBuildOutputBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${CodeBuildName}-output"
  CodeBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Ref CodeBuildName
      Source:
        Type: "CODECOMMIT"
        Location: !Ref CodeCommitRepoURL
        GitCloneDepth: 1
        BuildSpec: |-
          version: 0.2
          phases:
            build:
              commands:
                - hugo -v
            post_build:
              commands:
                - echo Build completed on $(date)
          artifacts:
            files:
              - '**/*'
            base-directory: public
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: "S3"
        Location: !Ref CodeBuildOutputBucket
        Name: !Ref CodeBuildName
        Packaging: "ZIP"
      Environment:
        Type: "LINUX_CONTAINER"
        Image: !Ref DockerImageURL
        ComputeType: "BUILD_GENERAL1_SMALL"
        ImagePullCredentialsType: "SERVICE_ROLE"
    DependsOn:
      - "CodeBuildRolePolicy"
  CodeBuildE2EtestRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "E2ETestServiceRole-${AWS::Region}-${CodeBuildName}"
      Path: "/service-role/"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: "codebuild.amazonaws.com"
            Action: "sts:AssumeRole"
  CodeBuildE2EtestPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: !Sub 'CodeBuildBasePolicy-${CodeBuildName}-${AWS::Region}'
      Roles:
        - !Ref CodeBuildE2EtestRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Resource:
              - !Sub arn:aws:logs:us-east-1:982211721436:log-group:/aws/codebuild/${E2ECodeBuildName}
              - !Sub arn:aws:logs:us-east-1:982211721436:log-group:/aws/codebuild/${E2ECodeBuildName}:*
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
          - Effect: Allow
            Resource:
              - arn:aws:s3:::codepipeline-us-east-1-*
            Action:
              - s3:PutObject
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:GetBucketAcl
              - s3:GetBucketLocation
          - Effect: Allow
            Resource:
              - !Sub arn:aws:codecommit:us-east-1:982211721436:${E2ERepoName}
            Action:
              - codecommit:GitPull
          - Effect: Allow
            Action:
              - codebuild:CreateReportGroup
              - codebuild:CreateReport
              - codebuild:UpdateReport
              - codebuild:BatchPutTestCases
              - codebuild:BatchPutCodeCoverages
            Resource:
              - !Sub "arn:aws:codebuild:us-east-1:982211721436:report-group/${E2ECodeBuildName}-*"
  CodeBuildE2Etest:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Ref E2ECodeBuildName
      Source:
        Type: CODECOMMIT
        Location: !Sub "https://git-codecommit.us-east-1.amazonaws.com/v1/repos/${E2ERepoName}"
        GitCloneDepth: 1
        BuildSpec: |-
          version: 0.2
          phases:
            install:
              runtime-versions:
                nodejs: latest
              commands:
                - npm ci
            pre_build:
              commands:
                - npm run cy:verify
                - npm run cy:info
            build:
              commands:
                - npx cypress run --browser chrome
      ServiceRole: !GetAtt CodeBuildE2EtestRole.Arn
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        Image: "public.ecr.aws/cypress-io/cypress/browsers:node18.12.0-chrome107"
        ComputeType: BUILD_GENERAL1_SMALL
    DependsOn:
      - CodeBuildE2EtestPolicy